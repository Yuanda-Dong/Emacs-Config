;;; init-writer.el -- User init file for Emacs.  -*- lexical-binding: t;-*-

;;; Commentary:

;; This file was generated by org-babel from config.org and should not be edited
;; directly.

  ;;; Code:

;; Org Mode Tweaks


;;(add-hook 'org-pre-cycle-hook 'org-end-of-line)
;; (add-hook 'org-cycle-pre-hook 'org-end-of-line)

(use-package org-modern
  :ensure t
  :custom
  (org-modern-hide-stars nil)       ; adds extra indentation
  (org-modern-table nil)
  (org-modern-list
   '(;; (?- . "-")
     (?* . "•")
     (?+ . "‣")))
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda))

(use-package org-bullets-mode
  :ensure org-bullets
  :config
  :hook org-mode)

;; (custom-set-faces '(org-block-end-line ((t (:background "#242730" :extend nil :height 1.0)))))

(use-package org-appear
  :hook (org-mode . org-appear-mode))

;; (use-package math-delimiters
;;   :init (slot/vc-install :fetcher "github" :repo "oantolin/math-delimiters")
;;   ;; OR (slot/vc-install :repo "oantolin/math-delimiters")
;;   )


(use-package org-modern-indent
  ;; :ensure nil
  :vc (:fetcher github :repo jdtsmith/org-modern-indent)
  :config ; add late to hook
  (add-hook 'org-mode-hook #'org-modern-indent-mode 90))

(use-package org-block-capf
  :vc (:fetcher github :repo xenodium/org-block-capf)
  :config (add-hook 'org-mode-hook #'org-block-capf-add-to-completion-at-point-functions))
;; Math Preview

(use-package math-preview
  :custom (math-preview-command "/home/me/.nvm/versions/node/v19.4.0/bin/math-preview")
  :after (any org markdown)
  )
(use-package org-fragtog
  :hook (org-mode . org-fragtog-mode)
  :config(defalias #'org-latex-preview #'math-preview-at-point)
  (defalias #'org-clear-latex-preview #'math-preview-clear-region)
  )

;; Better Font Faces
;; The =me/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

(defun me/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :height (cdr face))
    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    ;; (set-face-attribute 'org-block nil :foreground 'unspecified :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    ;; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
    ))

;;* Org Basic Config
;;This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.



(defun me/org-mode-setup ()
  ;; (display-line-numbers-mode 0)
  ;; (setq org-hide-emphasis-markers t)
  ;; (org-indent-mode)
  ;; (variable-pitch-mode 1)
  (org-display-inline-images)
  (math-preview-all)
  (me/org-font-setup))



(use-package org
  :hook (org-mode . me/org-mode-setup)
  :commands (org-capture org-agenda)
  :config
  (setq
   org-startup-indented t
   org-hide-emphasis-markers t
   org-src-fontify-natively t
   org-fontify-quote-and-verse-blocks t
   org-src-tab-acts-natively t
   org-edit-src-content-indentation 0
   org-hide-block-startup nil
   org-src-preserve-indentation nil
   ;;org-startup-folded 'content
   org-cycle-separator-lines 2)
  ;; org-appear
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
  (setq org-appear-autoentities t)
  (setq org-appear-autokeywords t)
       ;;; (setq org-appear-inside-latex t)
  (setq org-src-preserve-indentation nil))


;;** Center Org Buffers
;;We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writer experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.



;; (defun me/org-mode-visual-fill ()
;;   (setq visual-fill-column-width 120
;;         visual-fill-column-center-text t)
;;   (visual-fill-column-mode 1))

;; (use-package visual-fill-column
;;   :hook (org-mode . me/org-mode-visual-fill))



;;** Configure Babel Languages
;;To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.


(with-eval-after-load 'org
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     ;;(jupyter . t)
     ;; (rust . t)
     (python . t))))
;;   (push '("conf-unix" . conf-unix) org-src-lang-modes))

(with-eval-after-load 'org
  (defalias 'org-babel-execute:rust #'org-babel-execute:rustic)
  (add-to-list 'org-src-lang-modes '("rust" . rustic)))

;;** Structure Templates
;;Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing <  followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block..

;;You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].



;; This is needed as of Org 9.2
;; (with-eval-after-load 'org
;;   (require 'org-tempo)

;;   (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
;;   (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
;;   (add-to-list 'org-structure-template-alist '("py" . "src python")))



;; Publishing

(use-package simple-httpd)

(use-package ox-hugo
  :after ox)

;; Markdown Mode
;; Basic Setup

(defun me/markdown-mode-setup ()
  (setq markdown-max-image-size  `(,(window-body-width nil 1) . ,(window-body-height nil 1)))
  (setq markdown-max-image-size  `(1000 . 1000))
  ;; (org-fragtog-mode)
  ;; (display-line-numbers-mode 0)
  (markdown-toggle-fontify-code-blocks-natively)
  (markdown-toggle-markup-hiding)
  (markdown-display-inline-images)
  (math-preview-all)
  )
(use-package markdown-mode
  :hook (markdown-mode . me/markdown-mode-setup)
  :custom-face
  (markdown-header-delimiter-face ((t (:foreground "#616161" :height 0.9))))
  (markdown-header-face-1 ((t (:height 1.6  :foreground "#A3BE8C" :weight extra-bold :inherit markdown-header-face))))
  (markdown-header-face-2 ((t (:height 1.4  :foreground "#EBCB8B" :weight extra-bold :inherit markdown-header-face))))
  (markdown-header-face-3 ((t (:height 1.2  :foreground "#D08770" :weight extra-bold :inherit markdown-header-face))))
  (markdown-header-face-4 ((t (:height 1.15 :foreground "#BF616A" :weight bold :inherit markdown-header-face))))
  (markdown-header-face-5 ((t (:height 1.1  :foreground "#b48ead" :weight bold :inherit markdown-header-face))))
  (markdown-header-face-6 ((t (:height 1.05 :foreground "#5e81ac" :weight semi-bold :inherit markdown-header-face))))
  )


;; Center



;; (use-package visual-fill-column
;;   :hook (dashboard-mode . me/org-mode-visual-fill)
;;   :custom (visual-fill-column-fringes-outside-margins nil))

;; (defun me/org-mode-visual-fill ()
;;   (setq visual-fill-column-width 130
;;         visual-fill-column-center-text t)
;;   (visual-fill-column-mode 1))

(use-package org-web-tools)

;; (defun dw/org-mode-visual-fill ()
;;   (setq visual-fill-column-width 110
;;         visual-fill-column-center-text t)
;;   (visual-fill-column-mode 1))

(use-package visual-fill-column
  ;; :defer t
  :hook (dashboard-mode . visual-fill-column-mode)
  :custom
  (visual-fill-column-width 100)
  (visual-fill-column-center-text t)
  )

(use-package org-download
  :after org
  :defer nil
  :custom
  (org-download-method 'directory)
  (org-download-image-dir "~/Pictures")
  (org-download-heading-lvl 0)
  (org-download-timestamp "org_%Y%m%d-%H%M%S_")
  (org-image-actual-width 500)
  (org-download-screenshot-method "wl-paste -t image/png > '%s'")
  :bind
  ("C-M-y" . org-download-screenshot)
  :config
  (require 'org-download))

;; (use-package writeroom-mode
;;   :init
;;   ;; (global-writeroom-mode 1)
;;   :hook (dashboard-mode . writeroom-mode)
;;   :config
;;   (setq writeroom-width             100
;;         writeroom-fullscreen-effect 'maximized
;;         writeroom-maximize-window   nil
;;         writeroom-mode-line         t
;;         writeroom-major-modes       '(text-mode org-mode markdown-mode nov-mode Info-mode dashboard-mode)
;;         ;; writeroom-major-modes       '(nov-mode Info-mode dashboard-mode)
;;         ))



(provide 'init-writer)

;;; init-writer.el ends here
